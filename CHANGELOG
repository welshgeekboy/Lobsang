26th June 2016:
Began changelog for Lobsang code.
Previously, started work on Lobsang in general again. There was a large break since last December. Greatly improved obstacle.py, which attempts to avoid obstacles and drive forward as much as it can. This now works relatively well.
Began work on neural network- using PyBrain library. Very tentative steps right now. nndist.py learns to stay ~50cm from obstacle using ultrasonic. Neural network is trained to drive forward or back depending on the distance in cm that the ultrasonic reads.
Created menu.py- clone of piwars_menu.py but it only includes non piwars-specific programs. This is now the standard menu that loads when the Pi boots.

09th July 2016:
Overhauled design of backup script. Before, the user ran the backup script which waited 10s to give you time to swap the keyboard dongle for the USB drive. Then the backup script would blindly attempt to copy files across to the drive.
Now, the backup script is linked to udev so when the USB drive is hotplugged udev runs the backup script automatically and copies all the files across without needing human input. Plug the stick in, wait for the copy to complete, then unplug the stick.
Doesn't work yet though. 

11th July 2016:
Finished backup script! Now it works as described above, every time the drive is hotplugged, although:
One problem remains- the filenames are shortened to only 8 chars long, with a max of 3 chars for the extension excluding the full stop. All files and directories are copied in lowercase too for some reason. For example the file "REALLYlongName.html" becomes "reallylo.htm". Data in the files is not modified though.
Started looking into creating a fake screen for pygame to display (nothing) to. I use pygame to get key presses but the robot has no standard screen (only an OLED) so there's no point showing a pygame screen.
I copied some code off Average Man Vs Pi's pastebin page with the code for AverageBot with the correct command, but it's not working yet.
Removed backup option from menu.py - this is automatic now (see above).
Modified a few files - put a prompt in autorun.py for updating date and time manually (no accurate clock on Pi when powered off) and tidied up a bit.

12th July 2016:
Question I'd posted on StackExchange concerning the strange file renames (see above) had answers. They say I change how the drive is mounted because if mounted as msdos (as I had it) you get the file renames.
I changed the /etc/fstab file entry for my drive so it mounts it as vfat (FAT32) now.
USB backup renames files problem is now solved.
USB auto backup works completely and perfectly.
I'm considering adding a 'sync' function so I can add new code to a directory on the drive and when data is copied across, the backup script also checks for new code files in /mnt/Lobsang/new/ or similar.
Removed fstab entry for backup drive. It's not required. The mount command is now entirely within the backup script.
Added install new code function in backup.sh- now the script looks in the directory  Lobsang/install/  for any files or directories and moves them to  /home/pi/lobsang/ . Any pre-existing files on the Pi are backed up first.
Install new code function is still in infancy- it works ok, but may need to become more robust.
Renamed backup.sh as synchronise.sh

13th July 2016:
Massively modified the code in menu.py- you NO LONGER press a number key that refers to a script on the OLED screen (eg 1 == Line follower).
Now, menu.py has a cursor that is moved by the up and down arrow keys. The command under the cursor is run when you press the return key. It's a more intuitive interface.
More functionality added to menu.py- there is the option to display and run any and all Python programs within  /home/pi/lobsang/  directory. Selecting an option makes menu.py search the directory for all Python scripts (*.py), exlude my libraries (eg Lobsang.py) and itself, then display the remaining programs on the OLED so the user can search through them and run any of them.
menu.py is now smaller and more Pythonic with simpler code and more code reused. Very happy with new cursor selection feature.
Oled.py has one additional function- you can define your own symbols. Feed a 2D array in and some coords and it renders (1/0) to the OLED. This is how the cursor is created in menu.py

16th July 2016:
Was hoping to find a way of hiding the PyGame screen so the console could always be displayed through HDMI, but after some research I found this is not a feature of PyGame. It is impossible.
Will look into other methods of catching keyboard input so I can use a less bulky and more specific library (PyGame is for games!).
